Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.


/*
Solved using comparing the elements of the array
*/

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        long max1 = LONG_MIN;
        long max2 = LONG_MIN;
        long max3 = LONG_MIN;
        for(int i : nums){
            if(i==max1 or i==max2 or i==max3)
                continue;
            if(i>max1){
                max3 = max2;
                max2 = max1;
                max1 = i;
            }
            else if(i>max2){
                max3 = max2;
                max2 = i;
            }
            else if(i>max3){
                max3 = i;
            }
        }
        if(max3 == LONG_MIN)
            return max1;
        else
            return max3;
    }
};
