You are given an integer array nums sorted in ascending order, and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

  1 <= nums.length <= 5000
  -10^4 <= nums[i] <= 10^4
  All values of nums are unique.
  nums is guranteed to be rotated at some pivot.
  -10^4 <= target <= 10^4
  
  
  /*
  Solved using the approach of binary search which lowers down to 3 cases when array is rotated and target is in left of the mid,
  array is rotated and target is in the right of the mid, and third case is array is not rotated then we can use the logic normal binary search
  */
  
  
  
  class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size()-1;
        while(l <= r){
            int mid = (l+r)/2;
            if(target == nums[mid]){
                return mid;
            }
            if(nums[mid] > nums[r]){
                if(target < nums[mid] and target >= nums[l])
                    r = mid-1;
                else
                    l = mid+1;
            }
            else if(nums[mid] < nums[l]){
                if(target > nums[mid] and target <= nums[r])
                    l = mid+1;
                else
                    r = mid-1;
            }
            else{
                if(target < nums[mid])
                    r = mid-1;
                else
                    l = mid+1;
            }
        }
        return -1;
    }
};
