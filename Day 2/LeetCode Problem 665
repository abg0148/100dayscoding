Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:

Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
 

Constraints:

1 <= n <= 10 ^ 4
- 10 ^ 5 <= nums[i] <= 10 ^ 5


/* 
Solved Using Greedy Approach i.e. when nums[i-1] > nums[i] for some i, we need to change nums[i-1]'s value and 
when nums[i-2] > nums[i] we need to change the value of nums[i]'s value else we need to change both the values of nums[i-2] and nums[i-1] 
*/


class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        bool x = false;
        for(int i=1;i<nums.size();i++){
            if(nums[i]<nums[i-1]){
                if(x)
                    return false;
                else{
                    x = true;
                    if(i-2>=0 and nums[i]<nums[i-2])
                        nums[i] = nums[i-1];
                }
            }  
        }
        return true;
    }
};
