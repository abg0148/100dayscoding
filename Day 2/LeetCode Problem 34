Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non decreasing array.
-10^9 <= target <= 10^9


/*
Solved using the binary search approach in which moving the left to the target value and then move the right to the target value
*/



class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int l = 0, r = nums.size(), mid, start, end;
        while(l<r){
            mid = (l+r)/2;
            if(nums[mid] >= target)
                r = mid;
            else
                l = mid+1; 
        }
        start = l;
        l = 0, r = nums.size();
        while(l<r){
            mid = (l+r)/2;
            if(nums[mid]>target)
                r = mid;
            else
                l = mid+1;
        }
        end = r;
        if(start == end)
            return vector<int> {-1,-1};
        else
            return vector<int> {start, end-1};
        
    }
};
