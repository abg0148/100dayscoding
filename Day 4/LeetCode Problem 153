Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1
Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0


/*
Solved using the approach of binary search, check the condition and if array is sorted and not rotated then apply binary search otherwise find mid point and check it
*/



class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.size() == 1)
            return nums[0];
        int l=0, r=nums.size()-1;
        
        if(nums[r] > nums[0]){
            return nums[0];
        }
        while(r >= l){
            int mid = l + (r-l)/2;
            if(nums[mid]>nums[mid+1])
                return nums[mid+1];
            if(nums[mid-1]>nums[mid])
                return nums[mid];
            if(nums[mid]>nums[0])
                l = mid+1;
            else
                r = mid-1;
        }
        return -1;
    }
    
};
