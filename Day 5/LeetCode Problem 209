Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 


/*
Solved using two pointer approach move right pointer till we get condition sum>=s, then move left pointer till we get sum<s by storing min length 
*/



class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int l=0, r=0, sum=0, length=INT_MAX;
        while(r<nums.size()){
            sum += nums[r++];
            while(sum>=s){
                length = min(length, r-l);
                sum -= nums[l++];
            }
        }
        if(length == INT_MAX)
            return 0;
        else
            return length;
    }
};
