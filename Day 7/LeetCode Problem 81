Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?



/*
Solved by using the binary search approach in which finding the mid and if target is less than mid then search in left side and 
if target is greater than mid then search in right side
*/


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l=0, r=nums.size()-1;
        while(l<=r){
            while(l<r and nums[l] == nums[l+1])
                l++;
            while(l<r and nums[r] == nums[r-1])
                r--;
            int mid = (r+l)/2;
            if(target == nums[mid]){
                return true;
            }
            if(nums[mid] > nums[r]){
                if(target<nums[mid] and target>= nums[l])
                    r = mid-1;
                else
                    l = mid+1;
            }
            else if(nums[mid]<nums[r]){
                if(target>nums[mid] and target <= nums[r])
                    l = mid+1;
                else
                    r = mid-1;
            }
            else{
                if(target < nums[mid])
                    r = mid-1;
                else
                    l = mid+1;
            }
        }
        return false;
    }
};
