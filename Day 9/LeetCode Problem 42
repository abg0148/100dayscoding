Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6




/*
Solved by using the two pointer approach one pointer at the start and other at the end, start from left
and search for the maxheight of left and of right saperately, fix the higher one and flow the water from lower part
*/



class Solution {
public:
    int trap(vector<int>& height) {
        int l=0, r=height.size()-1;
        int output = 0;
        int maxleft = 0, maxright = 0;
        while(l<=r){
            if(height[l]<=height[r]){
                if(height[l]>=maxleft)
                    maxleft = height[l];
                else
                    output += maxleft-height[l];
                l++;
            }else{
                if(height[r]>=maxright)
                    maxright = height[r];
                else
                    output += maxright-height[r];
                r--;     
            }
        }
        return output;
    }
};
