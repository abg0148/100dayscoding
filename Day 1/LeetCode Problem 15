Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105


// Solved using Two Pointer Technique


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> output; 
        for(unsigned i=0;i<nums.size();i++){
            if(i>0 and (nums[i]==nums[i-1]))
                continue;
            int left = i+1, right = nums.size()-1;
            while(left<right){
                int sum = nums[i]+nums[left]+nums[right];
                if(sum>0)
                    right--;
                else if(sum<0)
                    left++;
                else{
                    output.push_back(vector<int> {nums[i], nums[left], nums[right]});
                    while(left<right and nums[left]==nums[left+1])
                        left++;
                    while(left<right and nums[right]==nums[right-1])
                        right--;
                    left++;
                    right--;
                }
            }
        }
        return output;
    }
};
